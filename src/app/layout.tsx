import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SessionProvider } from "next-auth/react";
import { prisma } from "@/lib/prisma";
import { TimelineItem, TimelineProvider } from "./context";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};


export async function getEventsAndTimes(): Promise<TimelineItem[]> {
  const eventsAndSites = await prisma.$queryRaw`
    SELECT
      e.id,
      e.name,
      e.description,
      e."createdAt",
      'event' as type,
      e.tagline,
      e.date,
      (SELECT json_agg(em) FROM "EventMedia" em WHERE em."eventId" = e.id) as "eventMedia"
    FROM "Event" e
    -- UNION ALL
    -- SELECT id, name, description, "createdAt", 'site' as type, tagline, NULL as date, NULL as "eventMedias"
    -- FROM "Site"
    ORDER BY "createdAt" DESC
    LIMIT 20;
  `;
  return eventsAndSites as TimelineItem[];
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const eventsAndSites = await getEventsAndTimes();
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProvider>
          <TimelineProvider items={eventsAndSites}>
            {children}
          </TimelineProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
